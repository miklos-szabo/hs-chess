@inject IJSRuntime js

<div class="modal @ClsShowModalPromo" id="@PromoDialogId">
	<div class="modal-content">
		@if (position.SideToMove == Chesslib.Side.WHITE)
		{
	  <input type="image" id="qPP" src="_content/PonzianiComponents/img/chesspieces/wikipedia/wQ.png" style="width: 60px;" @onclick="@(() => SetPromoPieceAsync(Chesslib.PieceType.QUEEN))" />
	  <input type="image" id="rPP" src="_content/PonzianiComponents/img/chesspieces/wikipedia/wR.png" style="width: 60px;" @onclick="@(() => SetPromoPieceAsync(Chesslib.PieceType.ROOK))" />
	  <input type="image" id="bPP" src="_content/PonzianiComponents/img/chesspieces/wikipedia/wB.png" style="width: 60px;" @onclick="@(() => SetPromoPieceAsync(Chesslib.PieceType.BISHOP))" />
	  <input type="image" id="nPP" src="_content/PonzianiComponents/img/chesspieces/wikipedia/wN.png" style="width: 60px;" @onclick="@(() => SetPromoPieceAsync(Chesslib.PieceType.KNIGHT))" />
		}
		else
		{
	  <input type="image" id="qPP" src="_content/PonzianiComponents/img/chesspieces/wikipedia/bQ.png" style="width: 60px;" @onclick="@(() => SetPromoPieceAsync(Chesslib.PieceType.QUEEN))" />
	  <input type="image" id="rPP" src="_content/PonzianiComponents/img/chesspieces/wikipedia/bR.png" style="width: 60px;" @onclick="@(() => SetPromoPieceAsync(Chesslib.PieceType.ROOK))" />
	  <input type="image" id="bPP" src="_content/PonzianiComponents/img/chesspieces/wikipedia/bB.png" style="width: 60px;" @onclick="@(() => SetPromoPieceAsync(Chesslib.PieceType.BISHOP))" />
	  <input type="image" id="nPP" src="_content/PonzianiComponents/img/chesspieces/wikipedia/bN.png" style="width: 60px;" @onclick="@(() => SetPromoPieceAsync(Chesslib.PieceType.KNIGHT))" />
		}
 </div>
</div>

<div class="modal @ClsShowModalSetup">
	<div class="modal-content" style="width: 500px;">
		<EditForm Model="AddSI" OnValidSubmit="@HandleSetupSubmitAsync" id="SetupDialog">
		<div class="form-group row">
			 <label for="setupSide"  class="col-sm-6 col-form-label">Side to Move</label>
			 <div class="col-sm-6">
			<InputSelect @bind-Value="AddSI.Side" id="setupSide">
				<option value="w">White</option>
				<option value="b">Black</option>
			</InputSelect>
			</div>
		</div>
		@if (AddSI.CastlingWhiteKingsidePossible) {
		<div class="form-check">
			<InputCheckbox class="form-check-input" @bind-Value="AddSI.CastlingWhiteKingside" id="setupCastlesWK"/>
			<label class="form-check-label" for="setupCastlesWK"> White Kingside </label>
		</div>
		}
		@if (AddSI.CastlingWhiteQueensidePossible) {
		<div class="form-check">
			<InputCheckbox class="form-check-input" @bind-Value="AddSI.CastlingWhiteQueenside" id="setupCastlesWQ"/>
			<label class="form-check-label" for="setupCastlesWQ"> White Queenside </label>
		</div>
		}
		@if (AddSI.CastlingBlackKingsidePossible) {
		<div class="form-check">
			<InputCheckbox class="form-check-input" @bind-Value="AddSI.CastlingBlackKingside" id="setupCastlesBK"/>
			<label class="form-check-label" for="setupCastlesBK"> Black Kingside </label>
		</div>
		}
		@if (AddSI.CastlingBlackQueensidePossible)
		{
		<div class="form-check">
			<InputCheckbox class="form-check-input" @bind-Value="AddSI.CastlingBlackQueenside" id="setupCastlesBQ"/>
			<label class="form-check-label" for="setupCastlesWQ"> Black Queenside </label>
		</div>
		}
	    @if (AddSI.EnPassantSquares().Count > 1)
			{
				<div class="form-group row">
					<label for="setupEP" class="col-sm-6 col-form-label">En Passant</label>
				<div class="col-sm-6">
					<InputSelect @bind-Value="AddSI.EnPassantSquare" id="setupSide">
						@foreach (var v in AddSI.EnPassantSquares())
						{
						<option value="@v">@v</option>
						}
			</InputSelect>
			</div>
		</div>
		}
		<div class="form-group row">
			 <label for="setupDrawplaycount" class="col-sm-6 col-form-label">Half-move Counter</label>
			 <div class="col-sm-6">
			<InputNumber @bind-Value="AddSI.DrawPlyCount" id="setupDrawplaycount" max="999" min="0" size="3" style="width: 3em;"/>
			</div>
		</div>
		<div class="form-group row">
			 <label for="setupMovenumber" class="col-sm-6 col-form-label">Move Number</label>
			 <div class="col-sm-6">
			<InputNumber @bind-Value="AddSI.MoveNumber" id="setupMovenumber" max="999" min="1" size="3" style="width: 3em;"/>
			</div>
		</div>
		 <div class="form-group row">
        <div class="col-sm-6 offset-sm-6">
		<button class="btn btn-primary" type="submit">Ok</button>
        </div>
		 </div>

		</EditForm>
	</div>
</div>

@if (SetupErrorMessage != null)
{
	<div class="alert alert-danger" role="alert"> @SetupErrorMessage</div>
}
<div id="@Id" @ondrop="HandleDropAsync" class="pzChessboard" @attributes=OtherAttributes @ref="_div">
	@if (SetupMode)
	{
		<div class="pzSparePieces" style="align-content:center; height:10%; width:100%; padding-left:12.5%" ondragover="event.preventDefault();"  @ondragenter="() => HandleDragEnterOutside()" ondrop="event.preventDefault();">
		@{
			string imgs = "KQRBNP";
				char side = Rotate ? 'w' : 'b';
				for (int i = 0; i < imgs.Length; ++i)
				{
					char pc = imgs[i];
					char pieceChar = side == 'w' ? pc : Char.ToLower(pc);
					<img src=@($"{PathPieceImages}{side}{pc}.png") 
					     style="width: 14.3%; height: 100%;"
						 draggable="true"
						 @ondragstart="() => HandleDragStartSparePieces(pieceChar)"/>
				}
		 }
		</div>
	}
	<div class="pzBoard" 
	     style="@BoardStyle"
		 ondragover="event.preventDefault();">
		@{
		char[] board = Chesslib.Fen.GetPieceArray(_fen);
		@for (int rank = RankStart; rank >= 0 && rank < 8; rank += RankStep)
		{
			<div class="pzBoardRow" style="height: 12.5%; width: 100%;">
				@for (int file = FileStart; file >= 0 && file < 8; file += FileStep)
				{
					Chesslib.Square square = (Chesslib.Square)(8 * rank + file);					
					<div class="@SquareClass(rank, file)" style="@SquareStyle" @ondragenter="() => HandleDragEnter(square)" @onclick="() => PieceClicked(square)" id="@SquareId(square)" ondrop="event.preventDefault();">
						@if (ShowCoordinates && file == FileStart)
						{
							<div class="pzNotation pzNumeric">@(rank+1)</div>
						}
						@if (ShowCoordinates && rank == RankEnd)
						{
							<div class="pzNotation pzAlpha">@SquareName(0, file)[0]</div>
						}
						@if (board[8*rank +file] != Chesslib.Fen.PIECE_CHAR_NONE)
						{
							<img class="pzPieceImage" 
							     src="@GetPieceImageSource(board[8*rank +file])" 
								 title="Piece"
								 draggable="@IsDraggable(square)"
                                 @ondragstart="() => HandleDragStart(square)"
								 style="width: 100%; height: 100%;" /> 
						}
					 </div>
				}
				<div class="pzClearfix"/>
			</div>
		}
		}
	</div>
	@if (SetupMode)
	{
		<div class="pzSparePieces" style="align-content:center; height:10%; width:100%; padding-left:12.5%" ondragover="event.preventDefault();" @ondragenter="() => HandleDragEnterOutside()" ondrop="event.preventDefault();">
		@{
			string imgs = "KQRBNP";
				char side = Rotate ? 'b' : 'w';
				for (int i = 0; i < imgs.Length; ++i)
				{
					char pc = imgs[i];
					char pieceChar = side == 'w' ? pc : Char.ToLower(pc);
					<img src=@($"{PathPieceImages}{side}{pc}.png") 
					     style="width: 14.3%; height: 100%;"
						 draggable="true"
						 @ondragstart="() => HandleDragStartSparePieces(pieceChar)"/>
				}
		 }
		</div>
	}
</div>

@code {


}
