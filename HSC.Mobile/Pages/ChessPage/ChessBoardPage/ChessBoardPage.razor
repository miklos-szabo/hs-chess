@page "/"
@using HSC.Mobile.Enums
@using HSC.Mobile.Services
@using Result = HSCApi.Result
@inject SignalrService _signalrService
@inject CurrentGameService _currentGameService
@inject SettingsService _settingsService
@inject EventService _eventService

<Chessboard Size="393" OnMovePlayed="OnMovePlayed" @ref="chessBoard" Rotate="@(!_currentGameService.AmIWhite)" ColorDarkSquares="@(_settingsService.BoardTheme == 1 ? "#b58863" : "#28caf7")" ColorLightSquares="@(_settingsService.BoardTheme == 1 ? "#f0d9b5" : "#ebebeb")" HighlightLastAppliedMove="true" />

@code {
    private Chessboard chessBoard;
    private Game game = new Game();

    protected override Task OnInitializedAsync()
    {
        if (!_currentGameService.IsHistoryMode)
        {
            _signalrService.MoveReceivedEvent += MoveReceived;
        }

        _eventService.ChangeToFen += ChangeToFen;
        return base.OnInitializedAsync();
    }

    private void MoveReceived(object sender, MoveDto e)
    {
        var move = new Move(ParseSquare(e.Origin), ParseSquare(e.Destination), ParsePieceType(e.Promotion));
        var moveSan = game.Position.ToSAN(move);
        chessBoard.SetFen(game.Position.FEN);
        game.Add(new ExtendedMove(move));
        chessBoard.ApplyMove(move);
        _currentGameService.Pgn = game.ToPGN();
        _eventService.OnOpponentMoveProcessed(new HistoryMove{Fen = game.Position.FEN, San = moveSan});
    }

    private void ChangeToFen(object sender, string fen)
    {
        chessBoard.SetFen(fen);
        StateHasChanged();
    }

    void OnMovePlayed(MovePlayedInfo mpi)
    {
        if (_currentGameService.IsHistoryMode) return;

        game.Add(new ExtendedMove(mpi.Move));
        _currentGameService.Pgn = game.ToPGN();
        if (game.Position.IsMate)
        {
            _eventService.OnOwnMoveEndedGame(_currentGameService.AmIWhite ? Result.WhiteWonByCheckmate : Result.BlackWonByCheckmate);
        }
        if (game.Position.IsStalemate)
        {
            _eventService.OnOwnMoveEndedGame(Result.DrawByStalemate);
        }
        if (game.Position.IsDrawnByInsufficientMatingMaterial())
        {
            _eventService.OnOwnMoveEndedGame(Result.DrawByInsufficientMaterial);
        }

        _eventService.OnOwnMovePlayed(mpi);
    }

    private Square ParseSquare(string strSq)
    {
        return Enum.Parse<Square>(strSq.ToUpper());
    }

    private PieceType ParsePieceType(string strPiece)
    {
        switch (strPiece)
        {
            case "q": return PieceType.QUEEN;
            case "r": return PieceType.ROOK;
            case "n": return PieceType.KNIGHT;
            case "b": return PieceType.BISHOP;
        }
        return PieceType.NONE;
    }
}
